#!/usr/local/bin/php
<?php
/**
 * iadescan
 * A simple network scanning utility for the OnIADE project.
 *
 * @author Nathan Campos <nathan@innoveworkshop.com>
 */

namespace OnIADE;
require __DIR__ . "/../vendor/autoload.php";
use Symfony\Component\Process\Process;
use Nmap\Nmap;

// Configuration global variable.
$config = require(__DIR__ . "/../config/config.php");

// Disable any execution time limit.
set_time_limit(0);

/**
 * Script's entry point.
 * 
 * @param int   $argc Number of arguments supplied to the script.
 * @param array $argv Array of strings with script arguments.
 */
function main($argc, $argv) {
	global $config;

	// Check if we have the required arguments.
	if ($argc > 2)
		usage();

	//  Check if the user is requesting help.
	if ($argc > 1)
		if ($argv[1] == "-h")
			usage();

	// Check if we have Nmap installed and in the system PATH.
	if (!check_nmap()) {
		print "\033[1;31mERROR:\033[0m Couldn't execute Nmap. This script " .
			"requires Nmap to be installed and in the system PATH to work.\n\n";

		print "First check if you have Nmap installed. If you do, please add " .
			"to the system environment variable PATH. If you don't have it " .
			"installed, please go to \033[1;36mhttps://nmap.org/download.html" .
			"\033[0m and install it\n";

		exit(1);
	}

	// Print a little message to begin things.
	print "IADE Network Scanning Script\n\n";

	// Are we going to be running this as a daemon?
	if ($argc > 1) {
		if ($argv[1] == "-d") {
			// Check if the interval is valid.
			$interval = $config->scanner->interval;
			if ($interval <= 0) {
				print "\033[1;31mERROR:\033[0m Invalid scan interval " .
					"\"$interval\". Please choose a number greater than 1 minute.\n";
				exit(1);
			}

			// Run daemon.
			run_daemon($interval);
		}
	}

	// Just do a single network scan and quit.
	scan_network();
}

/**
 * Runs the network scan as a daemon.
 * 
 * @param int $interval Interval between scans (in minutes).
 */
function run_daemon($interval) {
	print "\033[1;33mNotice:\033[0m Starting network scanner as a daemon that " .
		"will perform a scan every \033[1;36m$interval\033[0m minutes.\n";

	while (true) {
		scan_network();
		print "\nGoing to sleep for $interval minutes... ";

		// Count robot sheep...
		for ($i = 0; $i < $interval; $i++) {
			sleep(60);
			print ($i + 1) . "... ";
		}

		// Let's start all over again!
		print_ok();
		print "\n";
	}
}

/**
 * Performs a network scan and imports the hosts found into the system.
 */
function scan_network() {
	// Print a little message.
	print "Starting a new network scan...\n";

	// Get hosts.
	$hosts = get_hosts();
	print "\n";

	// Import them into the system.
	foreach ($hosts as $host) {
		add_device_entry($host);
	}
}

/**
 * Gets the hosts on the network and returns them in an easy to use and
 * comprehensible array.
 * 
 * @return array Array of hosts.
 */
function get_hosts() {
	global $config;
	$arr = array();

	// Setup Nmap.
	print "Setting up Nmap for host scanning... ";
	$nmap = new Nmap();
	$nmap->disablePortScan();
	print_ok();

	// Scan the network.
	print "Performing network scan... ";
	$hosts = $nmap->scan([ $config->scanner->range ]);
	print_ok();
	print "\n";

	// Go through the available hosts.
	foreach ($hosts as $nhost) {
		// Ignore hosts that are not UP.
		if ($nhost->getState() != "up")
			continue;

		// Create the array and get IP address.
		$host = array(
			"ip_addr" => current($nhost->getIpv4Addresses())->getAddress(),
			"mac_addr" => null,
			"name" => null,
			"floor" => null
		);
		print "Found a new host: \033[1;36m" . $host["ip_addr"] . "\033[0m\n";

		// Get MAC address.
		print "Getting MAC address... ";
		if (!empty($nhost->getMacAddresses())) {
			$host["mac_addr"] = current($nhost->getMacAddresses())->getAddress();
			print "\033[1;36m" . $host["mac_addr"] . "\033[0m ";
			print_ok();
		} else {
			// Check if it's our own IP address, if so it's OK.
			if ($host["ip_addr"] == $config->host->ip_addr)
				$host["mac_addr"] = $config->host->mac_addr;

			// Check if everything failed and give up on this one.
			if (is_null($host["mac_addr"])) {
				print_failed();
				print "Something is wrong with this host. \033[1;31mGiving up" .
					"\033[0m.\n";
				continue;
			}

			// Print MAC address found.
			print "\033[1;36m" . $host["mac_addr"] . "\033[0m ";
			print_ok();
		}

		// Get hostname.
		print "Getting hostname... ";
		if (!empty($nhost->getHostnames())) {
			$host["name"] = current($nhost->getHostnames())->getName();
			print "\033[1;36m" . $host["name"] . "\033[0m ";
			print_ok();
		} else {
			print_failed();

			// Should we scan for NetBIOS names?
			if ($config->scanner->scan_netbios) {
				print "Trying to get NetBIOS name... ";
				$host["name"] = get_netbios_name($host["ip_addr"]);

				if (is_null($host["name"])) {
					print_failed();
				} else {
					print "\033[1;36m" . $host["name"] . "\033[0m ";
					print_ok();
				}
			}

			// Use the IP address as a hostname if we couldn't get any.
			if (is_null($host["name"])) {
				$host["name"] = $host["ip_addr"];
				print "Using IP address as hostname... \033[1;36m" .
					$host["name"] . "\033[0m ";
				print_ok();
			}
		}

		// Get floor.
		print "Trying to determine floor number... ";
		if ($config->dev->env) {
			// Just generate one for testing purposes.
			$host["floor"] = mt_rand($config->dev->min_floor,
				$config->dev->max_floor);
			print "\033[1;36m" . $host["floor"] . "\033[0m ";
			print_ok();
		} else {
			// Try to guess which floor the device is in.
			print_failed();
		}

		// Push our host into the hosts array.
		print "Adding device to host upload queue... ";
		array_push($arr, $host);
		print_ok();
		print "\n";
	}

	print "Finished scanning for devices!\n";
	return $arr;
}

/**
 * Scans a particular IP address for its NetBIOS name.
 * WARNING: Spamming this on a large network will slow things down.
 * 
 * @param  string $ip_addr IP address of the host to be searched.
 * @return string          NetBIOS name or NULL if one wasn't found.
 */
function get_netbios_name($ip_addr) {
	global $config;

	// Execute the Nmap NetBIOS host scan.
	$process = new Process([ "nmap", "--script", "nbstat", $ip_addr ]);
	$process->run();

	// Check if the execution was successful.
	if (!$process->isSuccessful())
		return null;

	// Try to find the NetBIOS name in the output.
	preg_match("/\| nbstat: NetBIOS name: ([^,]+), NetBIOS/",
		$process->getOutput(), $matches, PREG_UNMATCHED_AS_NULL);

	// No NetBIOS name available.
	if (empty($matches))
		return null;

	return $matches[1];
}

/**
 * Adds a device entry to the history and also adds the device to the database
 * if it doesn't exist.
 * 
 * @param array $host Host associative array to be imported into the system.
 */
function add_device_entry($host) {
	$device = null;
	$floor = null;

	print "Importing \033[1;36m" . $host["name"] . "\033[0m (" .
		$host["ip_addr"] . ")... ";
	
	// Check if the device isn't already in the database.
	$device = Device::FromMACAddress($host["mac_addr"]);
	if (is_null($device)) {
		// Looks like we have a new one. Add it to the list first.
		$device = new Device(null, $host["mac_addr"]);
		$device->save();
	}

	// Set hostname to device if available.
	if (!is_null($host["name"])) {
		$device->set_hostname($host["name"]);
		$device->save();
	}

	// Check if the floor exists.
	$floor = Floor::FromNumber($host["floor"]);
	if (is_null($floor)) {
		print_failed();
		print "Invalid floor number \"" . $host["floor"] . "\". \033[1;31m" .
			"Giving up\033[0m.\n";
		return;
	}

	// Create a new device entry.
	$entry = History\Entry::Create($device, $floor, $host["ip_addr"]);
	print_ok();
}

/**
 * Checks if Nmap is present for execution.
 * 
 * @return boolean TRUE if Nmap can be executed.
 */
function check_nmap() {
	global $config;

	// Try to run Nmap.
	$process = new Process([ "nmap", "-h" ]);
	$process->run();

	return $process->isSuccessful();
}

/**
 * Prints a green OK message.
 * 
 * @param  boolean $line_break Automatically add a line break at the end?
 */
function print_ok($line_break = true) {
	print "\033[1;32mOK\033[0m";
	if ($line_break)
		print "\n";
}

/**
 * Prints a red FAILED message.
 * 
 * @param  boolean $line_break Automatically add a line break at the end?
 */
function print_failed($line_break = true) {
	print "\033[1;31mFAILED\033[0m";
	if ($line_break)
		print "\n";
}

/**
 * Teaches the user how to use the script.
 */
function usage() {
	global $argv;

	print "Usage: $argv[0] [-d] [-h]\n";
	print "A simple network scanner for the OnIADE project.\n\n";

	print "Arguments:\n";
	print "    -d\tSets the script to run as a daemon scanning the network in intervals.\n";
	print "    -h\tShows this message.\n\n";

	print "When run without any arguments it'll just do a single network scan.\n\n";

	print "Developed by Nathan Campos <nathan@innoveworkshop.com>\n";

	// Exit with class if we were asked to.
	if ($argv[1] == "-h")
		exit(0);

	exit(1);
}

main($argc, $argv);
?>
